diff '--exclude=.git' -urN a/meson.build b/meson.build
--- a/meson.build	2020-11-19 18:57:42.000000000 -0600
+++ b/meson.build	2021-05-26 12:38:06.396911371 -0500
@@ -119,13 +119,11 @@
 pulse_req_version = '>= 2.0'
 
 accounts_dep = dependency('accountsservice', version: '>= 0.6.39')
-colord_dep = dependency('colord', version: '>= 0.1.34')
 gdk_pixbuf_dep = dependency('gdk-pixbuf-2.0', version: '>= 2.23.0')
 gio_dep = dependency('gio-2.0')
 glib_dep = dependency('glib-2.0', version: '>= 2.56.0')
 gnome_desktop_dep = dependency('gnome-desktop-3.0', version: '>= 3.27.90')
 gnome_settings_dep = dependency('gnome-settings-daemon', version: '>= 3.27.90')
-goa_dep = dependency('goa-1.0', version: goa_req_version)
 gsettings_desktop_dep = dependency('gsettings-desktop-schemas', version: '>= 3.31.0')
 libxml_dep = dependency('libxml-2.0')
 polkit_gobject_dep = dependency('polkit-gobject-1', version: '>= 0.114')
@@ -149,29 +147,36 @@
   dependency('gtk+-3.0', version: '>= 3.22.20')
 ]
 
-# Check for CUPS 1.4 or newer
-cups_dep = dependency('cups', version : '>= 1.4', required: false)
-assert(cups_dep.found(), 'CUPS 1.4 or newer not found')
-
-# https://bugzilla.gnome.org/show_bug.cgi?id=696766
-cups_cflags = []
-if cups_dep.version().version_compare('>= 1.6')
-  cups_cflags += '-D_PPD_DEPRECATED='
-endif
-
-# cups headers
-check_headers = [
-  ['HAVE_CUPS_CUPS_H', 'cups/cups.h'],
-  ['HAVE_CUPS_PPD_H', 'cups/ppd.h']
-]
+# Optional dependency for the printers panel
+enable_cups = get_option('cups')
+if enable_cups
+  cups_dep = dependency('cups', version : '>= 1.4', required: false)
+  assert(cups_dep.found(), 'CUPS 1.4 or newer not found')
+
+  # https://bugzilla.gnome.org/show_bug.cgi?id=696766
+  cups_cflags = []
+  if cups_dep.version().version_compare('>= 1.6')
+    cups_cflags += '-D_PPD_DEPRECATED='
+  endif
+
+  # cups headers
+  check_headers = [
+    ['HAVE_CUPS_CUPS_H', 'cups/cups.h'],
+    ['HAVE_CUPS_PPD_H', 'cups/ppd.h']
+  ]
 
-foreach header: check_headers
-  assert(cc.has_header(header[1], args: cups_cflags), 'CUPS headers not found: ' + header[1])
-endforeach
-
-config_h.set10('HAVE_CUPS_HTTPCONNECT2',
-               cc.has_function('httpConnect2', dependencies: cups_dep),
-               description: 'Define if httpConnect2() is available in CUPS')
+  foreach header: check_headers
+    assert(cc.has_header(header[1], args: cups_cflags), 'CUPS headers not found: ' + header[1])
+  endforeach
+endif
+config_h.set('BUILD_PRINTERS', enable_cups,
+             description: 'Defined if cups support is enabled')
+
+if enable_cups
+  config_h.set10('HAVE_CUPS_HTTPCONNECT2',
+                 cc.has_function('httpConnect2', dependencies: cups_dep),
+                 description: 'Define if httpConnect2() is available in CUPS')
+endif
 
 # Optional dependency for the user accounts panel
 enable_cheese = get_option('cheese')
@@ -184,6 +189,27 @@
 config_h.set('HAVE_CHEESE', enable_cheese,
              description: 'Define to 1 to enable cheese webcam support')
 
+# Optional dependency for the color panel
+enable_color = get_option('color')
+if enable_color
+  colord_dep = dependency('colord', version: '>= 0.1.34')
+endif
+config_h.set('BUILD_COLOR', enable_color,
+             description: 'Defined if color support is enabled')
+
+# Optional dependency for the online accounts panel
+enable_goa = get_option('goa')
+if enable_goa
+  goa_dep = dependency('goa-1.0', version: goa_req_version)
+endif
+config_h.set('BUILD_ONLINE_ACCOUNTS', enable_goa,
+             description: 'Defined if goa support is enabled')
+
+# Optional dependency for the sharing panel
+enable_sharing = get_option('sharing')
+config_h.set('BUILD_SHARING', enable_sharing,
+             description: 'Defined if file and screen sharing support is enabled')
+
 # IBus support
 enable_ibus = get_option('ibus')
 if enable_ibus
@@ -208,43 +234,53 @@
              description: 'Define to 1 if Snap support is enabled')
 
 if host_is_linux
-  # network manager
-  network_manager_deps = [
-    dependency('libnm', version: '>= 1.12.0'),
-    dependency('libnma', version: '>= 1.8.0'),
-    dependency('mm-glib', version: '>= 0.7')
-  ]
+  # Optional dependency for the network panel
+  enable_networkmanager = get_option('networkmanager')
+  if enable_networkmanager
+    network_manager_deps = [
+      dependency('libnm', version: '>= 1.12.0'),
+      dependency('libnma', version: '>= 1.8.0'),
+      dependency('mm-glib', version: '>= 0.7')
+    ]
+  endif
+  config_h.set('BUILD_NETWORK', enable_networkmanager,
+               description: 'Define to 1 to build the Network panel')
+  config_h.set('HAVE_NETWORK_MANAGER', enable_networkmanager,
+               description: 'Define to 1 if NetworkManager is available')
 endif
-config_h.set('BUILD_NETWORK', host_is_linux,
-             description: 'Define to 1 to build the Network panel')
-config_h.set('HAVE_NETWORK_MANAGER', host_is_linux,
-             description: 'Define to 1 if NetworkManager is available')
 
 if host_is_linux_not_s390
-  # gnome-bluetooth
-  gnome_bluetooth_dep = dependency('gnome-bluetooth-1.0', version: '>= 3.18.2')
-
-  libwacom_dep = dependency('libwacom', version: '>= 0.7')
-
-  wacom_deps = [
-    libwacom_dep,
-  ]
-  config_h.set('HAVE_WACOM_3D_STYLUS', libwacom_dep.version().version_compare('>= 0.27'),
-               description: 'Define to 1 if libwacom provides definition for 3D styli')
-else
-  message('Bluetooth and Wacom panels will not be built (no USB support on this platform)')
-  message('Thunderbolt panel will not be built (not supported on this platform)')
-endif
-config_h.set('BUILD_BLUETOOTH', host_is_linux_not_s390,
-             description: 'Define to 1 to build the Bluetooth panel')
-config_h.set('HAVE_BLUETOOTH', host_is_linux_not_s390,
-             description: 'Define to 1 if bluetooth support is available')
-config_h.set('BUILD_WACOM', host_is_linux_not_s390,
-             description: 'Define to 1 to build the Wacom panel')
-config_h.set('HAVE_WACOM', host_is_linux_not_s390,
-             description: 'Define to 1 if Wacom is supportted')
-config_h.set('BUILD_THUNDERBOLT', host_is_linux_not_s390,
-             description: 'Define to 1 to build the Thunderbolt panel')
+  # Optional dependency for the bluetooth panel
+  enable_bluetooth = get_option('bluetooth')
+  if enable_bluetooth
+    gnome_bluetooth_dep = dependency('gnome-bluetooth-1.0', version: '>= 3.18.2')
+  endif
+  config_h.set('BUILD_BLUETOOTH', enable_bluetooth,
+               description: 'Define to 1 to build the Bluetooth panel')
+  config_h.set('HAVE_BLUETOOTH', enable_bluetooth,
+               description: 'Define to 1 if bluetooth support is available')
+
+  # Optional dependency for the wacom panel
+  enable_wacom = get_option('wacom')
+  if enable_wacom
+    libwacom_dep = dependency('libwacom', version: '>= 0.7')
+
+    wacom_deps = [
+      libwacom_dep,
+    ]
+    config_h.set('HAVE_WACOM_3D_STYLUS', libwacom_dep.version().version_compare('>= 0.27'),
+                 description: 'Define to 1 if libwacom provides definition for 3D styli')
+  endif
+  config_h.set('BUILD_WACOM', enable_wacom,
+               description: 'Define to 1 to build the Wacom panel')
+  config_h.set('HAVE_WACOM', enable_wacom,
+               description: 'Define to 1 if Wacom is supportted')
+
+  # Optional dependency for the thunderbolt panel
+  enable_thunderbolt = get_option('thunderbolt')
+  config_h.set('BUILD_THUNDERBOLT', enable_thunderbolt,
+               description: 'Define to 1 to build the Thunderbolt panel')
+endif
 
 gnome = import('gnome')
 i18n = import('i18n')
@@ -288,16 +324,22 @@
 output += '\n        ' + meson.project_name() + ' - ' + meson.project_version() + '\n'
 output += '    ===================================\n'
 output += ' Options \n'
-output += '     Documentation .............................. ' + get_option('documentation').to_string() + '\n'
-output += '     Build Tests ................................ ' + get_option('tests').to_string() + '\n'
-output += '     Tracing .................................... ' + enable_tracing.to_string() + '\n'
-output += '     Optimized .................................. ' + control_center_optimized.to_string() + '\n'
+output += '     Documentation ....................................... ' + get_option('documentation').to_string() + '\n'
+output += '     Build Tests ......................................... ' + get_option('tests').to_string() + '\n'
+output += '     Tracing ............................................. ' + enable_tracing.to_string() + '\n'
+output += '     Optimized ........................................... ' + control_center_optimized.to_string() + '\n'
 output += ' Panels \n'
-output += '     GNOME Bluetooth (Bluetooth panel) .......... ' + host_is_linux_not_s390.to_string() + '\n'
-output += '     Cheese (Users panel webcam support) ........ ' + enable_cheese.to_string() + '\n'
-output += '     IBus (Region panel IBus support) ........... ' + enable_ibus.to_string() + '\n'
-output += '     NetworkManager (Network panel) ............. ' + host_is_linux.to_string() + '\n'
-output += '     Wacom (Wacom tablet panel) ................. ' + host_is_linux_not_s390.to_string() + '\n'
-output += '     Snap support ............................... ' + enable_snap.to_string() + '\n'
+output += '     GNOME Bluetooth (Bluetooth panel) ................... ' + enable_bluetooth.to_string() + '\n'
+output += '     Cheese (Users panel webcam support) ................. ' + enable_cheese.to_string() + '\n'
+output += '     Color (Color panel) ................................. ' + enable_color.to_string() + '\n'
+output += '     CUPS (Printers panel) ............................... ' + enable_cups.to_string() + '\n'
+output += '     GNOME Online Accounts (Online Accounts panel) ....... ' + enable_goa.to_string() + '\n'
+output += '     IBus (Region panel IBus support) .................... ' + enable_ibus.to_string() + '\n'
+output += '     Kerberos ............................................ ' + enable_krb.to_string() + '\n'
+output += '     NetworkManager (Network panel) ...................... ' + enable_networkmanager.to_string() + '\n'
+output += '     Sharing (Sharing panel) ............................. ' + enable_sharing.to_string() + '\n'
+output += '     Thunderbolt (Thunderbolt panel) ..................... ' + enable_thunderbolt.to_string() + '\n'
+output += '     Wacom (Wacom tablet panel) .......................... ' + enable_wacom.to_string() + '\n'
+output += '     Snap support ........................................ ' + enable_snap.to_string() + '\n'
 
 message(output)
diff '--exclude=.git' -urN a/meson_options.txt b/meson_options.txt
--- a/meson_options.txt	2020-11-19 18:57:42.000000000 -0600
+++ b/meson_options.txt	2021-05-26 12:32:03.611522458 -0500
@@ -1,9 +1,19 @@
+option('bluetooth', type: 'boolean', value: true, description: 'build with GNOME Bluetooth support')
 option('cheese', type: 'boolean', value: true, description: 'build with cheese webcam support')
+option('color', type: 'boolean', value: true, description: 'build with colord support')
+option('cups', type: 'boolean', value: true, description: 'build with CUPS support')
 option('documentation', type: 'boolean', value: false, description: 'build documentation')
+option('gnome_session_libexecdir', type: 'string', value: '', description: 'Directory for gnome-session\'s libexecdir')
+option('goa', type: 'boolean', value: true, description: 'build with GNOME Online Accounts support')
 option('ibus', type: 'boolean', value: true, description: 'build with IBus support')
+option('krb', type: 'boolean', value: true, description: 'build with kerberos support')
+option('networkmanager', type: 'boolean', value: true, description: 'build with NetworkManager support')
 option('privileged_group', type: 'string', value: 'wheel', description: 'name of group that has elevated permissions')
+option('sharing', type: 'boolean', value: true, description: 'build with file and screen sharing support')
 option('snap', type: 'boolean', value: false, description: 'build with Snap support')
 option('tests', type: 'boolean', value: true, description: 'build tests')
+option('thunderbolt', type: 'boolean', value: true, description: 'build with Thunderbolt support')
 option('tracing', type: 'boolean', value: false, description: 'add extra debugging information')
+option('wacom', type: 'boolean', value: true, description: 'build with Wacom support')
 option('wayland', type: 'boolean', value: true, description: 'build with Wayland support')
 option('profile', type: 'combo', choices: ['default','development'], value: 'default')
diff '--exclude=.git' -urN a/panels/background/bg-pictures-source.c b/panels/background/bg-pictures-source.c
--- a/panels/background/bg-pictures-source.c	2020-11-19 18:57:42.000000000 -0600
+++ b/panels/background/bg-pictures-source.c	2021-05-26 12:32:03.612522453 -0500
@@ -23,13 +23,17 @@
 
 #include "bg-pictures-source.h"
 
+#ifdef BUILD_ONLINE_ACCOUNTS
 #include "cc-background-grilo-miner.h"
+#endif /* BUILD_ONLINE_ACCOUNTS */
 #include "cc-background-item.h"
 
 #include <string.h>
 #include <cairo-gobject.h>
 #include <gio/gio.h>
+#ifdef BUILD_ONLINE_ACCOUNTS
 #include <grilo.h>
+#endif /* BUILD_ONLINE_ACCOUNTS */
 #include <libgnome-desktop/gnome-desktop-thumbnail.h>
 #include <gdesktop-enums.h>
 
@@ -43,7 +47,9 @@
 
   GCancellable *cancellable;
 
+#ifdef BUILD_ONLINE_ACCOUNTS
   CcBackgroundGriloMiner *grl_miner;
+#endif /* BUILD_ONLINE_ACCOUNTS */
 
   GFileMonitor *picture_dir_monitor;
   GFileMonitor *cache_dir_monitor;
@@ -83,7 +89,9 @@
       g_clear_object (&source->cancellable);
     }
 
+#ifdef BUILD_ONLINE_ACCOUNTS
   g_clear_object (&source->grl_miner);
+#endif /* BUILD_ONLINE_ACCOUNTS */
 
   G_OBJECT_CLASS (bg_pictures_source_parent_class)->dispose (object);
 }
@@ -392,7 +400,11 @@
   const gchar *pictures_path;
   g_autoptr(GFile) pictures_dir = NULL;
   g_autoptr(GFile) cache_dir = NULL;
+#ifdef BUILD_ONLINE_ACCOUNTS
   GrlMedia *media;
+#else /* BUILD_ONLINE_ACCOUNTS */
+  gpointer media = NULL;
+#endif
 
   /* find png and jpeg files */
   if (!content_type)
@@ -432,7 +444,9 @@
                 "source-url", source_uri,
 		NULL);
 
+#ifdef BUILD_ONLINE_ACCOUNTS
   media = g_object_get_data (G_OBJECT (file), "grl-media");
+#endif /* BUILD_ONLINE_ACCOUNTS */
   if (media == NULL)
     {
       g_object_set_data_full (G_OBJECT (file), "item", g_object_ref (item), g_object_unref);
@@ -496,6 +510,7 @@
   return add_single_file (bg_source, file, content_type, mtime);
 }
 
+#ifdef BUILD_ONLINE_ACCOUNTS
 static gboolean
 add_single_file_from_media (BgPicturesSource *bg_source,
                             GFile            *file,
@@ -520,6 +535,7 @@
 
   return add_single_file (bg_source, file, content_type, (guint64) mtime_unix);
 }
+#endif /* BUILD_ONLINE_ACCOUNTS */
 
 gboolean
 bg_pictures_source_add (BgPicturesSource     *bg_source,
@@ -806,6 +822,7 @@
   return monitor;
 }
 
+#ifdef BUILD_ONLINE_ACCOUNTS
 static void
 media_found_cb (BgPicturesSource *self, GrlMedia *media)
 {
@@ -817,6 +834,7 @@
   g_object_set_data_full (G_OBJECT (file), "grl-media", g_object_ref (media), g_object_unref);
   add_single_file_from_media (self, file, media);
 }
+#endif /* BUILD_ONLINE_ACCOUNTS */
 
 static void
 bg_pictures_source_init (BgPicturesSource *self)
@@ -839,9 +857,11 @@
   cache_path = bg_pictures_source_get_cache_path ();
   self->cache_dir_monitor = monitor_path (self, cache_path);
 
+#ifdef BUILD_ONLINE_ACCOUNTS
   self->grl_miner = cc_background_grilo_miner_new ();
   g_signal_connect_swapped (self->grl_miner, "media-found", G_CALLBACK (media_found_cb), self);
   cc_background_grilo_miner_start (self->grl_miner);
+#endif /* BUILD_ONLINE_ACCOUNTS */
 }
 
 BgPicturesSource *
diff '--exclude=.git' -urN a/panels/background/meson.build b/panels/background/meson.build
--- a/panels/background/meson.build	2020-11-19 18:57:42.000000000 -0600
+++ b/panels/background/meson.build	2021-05-26 12:32:03.612522453 -0500
@@ -81,7 +81,6 @@
   'bg-source.c',
   'bg-wallpapers-source.c',
   'cc-background-chooser.c',
-  'cc-background-grilo-miner.c',
   'cc-background-item.c',
   'cc-background-panel.c',
   'cc-background-preview.c',
@@ -91,12 +90,21 @@
 deps = common_deps + [
   gdk_pixbuf_dep,
   gnome_desktop_dep,
-  goa_dep,
   libxml_dep,
-  dependency('cairo-gobject'),
-  dependency('grilo-0.3', version: '>= 0.3.0')
+  dependency('cairo-gobject')
 ]
 
+if enable_goa
+  sources = sources + files(
+    'cc-background-grilo-miner.c',
+  )
+
+  deps += [
+    goa_dep,
+    dependency('grilo-0.3', version: '>= 0.3.0')
+  ]
+endif
+
 cflags += [
   '-DDATADIR="@0@"'.format(control_center_datadir),
   '-DGNOME_DESKTOP_USE_UNSTABLE_API'
diff '--exclude=.git' -urN a/panels/bluetooth/meson.build b/panels/bluetooth/meson.build
--- a/panels/bluetooth/meson.build	2020-11-19 18:57:42.000000000 -0600
+++ b/panels/bluetooth/meson.build	2021-05-26 12:32:03.612522453 -0500
@@ -29,7 +29,13 @@
   export: true
 )
 
-deps = common_deps + [gnome_bluetooth_dep]
+deps = common_deps
+
+if enable_bluetooth
+  deps += [
+    gnome_bluetooth_dep
+  ]
+endif
 
 panels_libs += static_library(
   cappletname,
diff '--exclude=.git' -urN a/panels/color/meson.build b/panels/color/meson.build
--- a/panels/color/meson.build	2020-11-19 18:57:42.000000000 -0600
+++ b/panels/color/meson.build	2021-05-26 12:32:03.612522453 -0500
@@ -40,13 +40,18 @@
 )
 
 deps = common_deps + [
-  colord_dep,
   gnome_desktop_dep,
   m_dep,
-  dependency('colord-gtk', version: '>= 0.1.24'),
   dependency('libsoup-2.4')
 ]
 
+if enable_color
+  deps += [
+    colord_dep,
+    dependency('colord-gtk', version: '>= 0.1.24'),
+  ]
+endif
+
 cflags += [
   '-DBINDIR="@0@"'.format(control_center_bindir)
 ]
diff '--exclude=.git' -urN a/panels/display/cc-display-panel.c b/panels/display/cc-display-panel.c
--- a/panels/display/cc-display-panel.c	2020-11-19 18:57:42.000000000 -0600
+++ b/panels/display/cc-display-panel.c	2021-05-26 12:32:03.612522453 -0500
@@ -18,6 +18,8 @@
  *
  */
 
+#include <config.h>
+
 #include "cc-display-panel.h"
 
 #include <gtk/gtk.h>
@@ -36,7 +38,9 @@
 #include "cc-display-config-manager-dbus.h"
 #include "cc-display-config.h"
 #include "cc-display-arrangement.h"
+#ifdef BUILD_COLOR
 #include "cc-night-light-page.h"
+#endif /* BUILD_COLOR */
 #include "cc-display-resources.h"
 #include "cc-display-settings.h"
 
@@ -76,8 +80,10 @@
 
   guint           focus_id;
 
+#ifdef BUILD_COLOR
   CcNightLightPage *night_light_page;
   GtkDialog *night_light_dialog;
+#endif /* BUILD_COLOR */
 
   UpClient *up_client;
   gboolean lid_is_closed;
@@ -432,7 +438,9 @@
 
   g_clear_object (&self->shell_proxy);
 
+#ifdef BUILD_COLOR
   g_clear_pointer ((GtkWidget **) &self->night_light_dialog, gtk_widget_destroy);
+#endif /* BUILD_COLOR */
 
   G_OBJECT_CLASS (cc_display_panel_parent_class)->dispose (object);
 }
@@ -472,6 +480,7 @@
   config_ensure_of_type (panel, type);
 }
 
+#ifdef BUILD_COLOR
 static void
 on_night_light_list_box_row_activated_cb (CcDisplayPanel *panel)
 {
@@ -493,6 +502,7 @@
   gtk_window_set_transient_for (GTK_WINDOW (panel->night_light_dialog), toplevel);
   gtk_window_present (GTK_WINDOW (panel->night_light_dialog));
 }
+#endif /* BUILD_COLOR */
 
 static void
 on_output_enabled_active_changed_cb (CcDisplayPanel *panel)
@@ -635,7 +645,9 @@
   CcPanelClass *panel_class = CC_PANEL_CLASS (klass);
   GtkWidgetClass *widget_class = GTK_WIDGET_CLASS (klass);
 
+#ifdef BUILD_COLOR
   g_type_ensure (CC_TYPE_NIGHT_LIGHT_PAGE);
+#endif /* BUILD_COLOR */
 
   panel_class->get_help_uri = cc_display_panel_get_help_uri;
   panel_class->get_title_widget = cc_display_panel_get_title_widget;
@@ -653,7 +665,9 @@
   gtk_widget_class_bind_template_child (widget_class, CcDisplayPanel, config_type_single);
   gtk_widget_class_bind_template_child (widget_class, CcDisplayPanel, current_output_label);
   gtk_widget_class_bind_template_child (widget_class, CcDisplayPanel, display_settings_frame);
+#ifdef BUILD_COLOR
   gtk_widget_class_bind_template_child (widget_class, CcDisplayPanel, night_light_page);
+#endif /* BUILD_COLOR */
   gtk_widget_class_bind_template_child (widget_class, CcDisplayPanel, output_enabled_switch);
   gtk_widget_class_bind_template_child (widget_class, CcDisplayPanel, output_selection_combo);
   gtk_widget_class_bind_template_child (widget_class, CcDisplayPanel, output_selection_stack);
@@ -663,7 +677,9 @@
   gtk_widget_class_bind_template_child (widget_class, CcDisplayPanel, stack_switcher);
 
   gtk_widget_class_bind_template_callback (widget_class, on_config_type_toggled_cb);
+#ifdef BUILD_COLOR
   gtk_widget_class_bind_template_callback (widget_class, on_night_light_list_box_row_activated_cb);
+#endif /* BUILD_COLOR */
   gtk_widget_class_bind_template_callback (widget_class, on_output_enabled_active_changed_cb);
   gtk_widget_class_bind_template_callback (widget_class, on_output_selection_combo_changed_cb);
   gtk_widget_class_bind_template_callback (widget_class, on_output_selection_two_toggled_cb);
diff '--exclude=.git' -urN a/panels/display/meson.build b/panels/display/meson.build
--- a/panels/display/meson.build	2020-11-19 18:57:42.000000000 -0600
+++ b/panels/display/meson.build	2021-05-26 12:32:03.612522453 -0500
@@ -25,15 +25,25 @@
   'cc-display-config-manager-dbus.c',
   'cc-display-config-manager.c',
   'cc-display-settings.c',
-  'cc-night-light-page.c',
 )
 
+if enable_color
+  sources += files(
+    'cc-night-light-page.c',
+  )
+endif
+
 resource_data = files(
   'cc-display-panel.ui',
   'cc-display-settings.ui',
-  'cc-night-light-page.ui',
 )
 
+if enable_color
+  resource_data += files(
+    'cc-night-light-page.ui',
+  )
+endif
+
 sources += gnome.compile_resources(
   'cc-' + cappletname + '-resources',
   cappletname + '.gresource.xml',
@@ -44,12 +54,17 @@
 )
 
 deps = common_deps + [
-  colord_dep,
   gnome_desktop_dep,
   m_dep,
   upower_glib_dep
 ]
 
+if enable_color
+  deps += [
+    colord_dep
+  ]
+endif
+
 cflags += [
   '-DDATADIR="@0@"'.format(control_center_datadir)
 ]
diff '--exclude=.git' -urN a/panels/meson.build b/panels/meson.build
--- a/panels/meson.build	2020-11-19 18:57:42.000000000 -0600
+++ b/panels/meson.build	2021-05-26 12:32:03.612522453 -0500
@@ -4,7 +4,6 @@
   'applications',
   'background',
   'camera',
-  'color',
   'datetime',
   'default-apps',
   'diagnostics',
@@ -16,31 +15,64 @@
   'microphone',
   'mouse',
   'notifications',
-  'online-accounts',
   'power',
-  'printers',
   'region',
   'removable-media',
   'search',
-  'sharing',
   'sound',
   'universal-access',
   'usage',
   'user-accounts'
 ]
 
-if host_is_linux
-  panels += ['network']
+if enable_color
+  panels += [
+    'color'
+  ]
 endif
 
-if host_is_linux_not_s390
+if enable_goa
+  panels += [
+    'online-accounts'
+  ]
+endif
+
+if enable_cups
+  panels += [
+    'printers'
+  ]
+endif
+
+if enable_sharing
   panels += [
-    'bluetooth',
-    'thunderbolt',
-    'wacom'
+    'sharing'
   ]
 endif
 
+if host_is_linux and enable_networkmanager
+  panels += ['network']
+endif
+
+if host_is_linux_not_s390
+  if enable_bluetooth
+    panels += [
+      'bluetooth'
+    ]
+  endif
+
+  if enable_thunderbolt
+    panels += [
+      'thunderbolt'
+    ]
+  endif
+
+  if enable_wacom
+    panels += [
+      'wacom'
+    ]
+  endif
+endif
+
 panels_list = []
 panels_libs = []
 foreach cappletname: panels
diff '--exclude=.git' -urN a/panels/network/meson.build b/panels/network/meson.build
--- a/panels/network/meson.build	2020-11-19 18:57:42.000000000 -0600
+++ b/panels/network/meson.build	2021-05-26 12:32:03.612522453 -0500
@@ -1,10 +1,16 @@
-deps = common_deps + network_manager_deps + [
+deps = common_deps + [
   polkit_gobject_dep,
   dependency('gmodule-2.0')
 ]
 
 network_inc = include_directories('.')
 
+if enable_networkmanager
+  deps += [
+    network_manager_deps
+  ]
+endif
+
 subdir('wireless-security')
 subdir('connection-editor')
 
diff '--exclude=.git' -urN a/panels/online-accounts/meson.build b/panels/online-accounts/meson.build
--- a/panels/online-accounts/meson.build	2020-11-19 18:57:42.000000000 -0600
+++ b/panels/online-accounts/meson.build	2021-05-26 12:32:03.612522453 -0500
@@ -29,10 +29,14 @@
   export: true
 )
 
-deps = common_deps + [
-  goa_dep,
-  dependency('goa-backend-1.0', version: goa_req_version)
-]
+deps = common_deps
+
+if enable_goa
+  deps += [
+    goa_dep,
+    dependency('goa-backend-1.0', version: goa_req_version)
+  ]
+endif
 
 panels_libs += static_library(
   cappletname,
diff '--exclude=.git' -urN a/panels/power/cc-power-panel.c b/panels/power/cc-power-panel.c
--- a/panels/power/cc-power-panel.c	2020-11-19 18:57:42.000000000 -0600
+++ b/panels/power/cc-power-panel.c	2021-05-26 12:32:03.613522449 -0500
@@ -1989,7 +1989,7 @@
                     G_CALLBACK (wifi_switch_changed), self);
 #endif
 
-#ifdef HAVE_BLUETOOTH
+#ifdef BUILD_BLUETOOTH
 
   self->bt_rfkill = cc_object_storage_create_dbus_proxy_sync (G_BUS_TYPE_SESSION,
                                                               G_DBUS_PROXY_FLAGS_NONE,
@@ -2033,7 +2033,7 @@
 		G_CALLBACK (bt_switch_changed), self);
 
   bt_powered_state_changed (self);
-#endif
+#endif /* BUILD_BLUETOOTH */
 }
 
 #define NEVER 0
diff '--exclude=.git' -urN a/panels/power/meson.build b/panels/power/meson.build
--- a/panels/power/meson.build	2020-11-19 18:57:42.000000000 -0600
+++ b/panels/power/meson.build	2021-05-26 12:32:03.613522449 -0500
@@ -34,11 +34,11 @@
   upower_glib_dep
 ]
 
-if host_is_linux
+if host_is_linux and enable_networkmanager
   deps += network_manager_deps
 endif
 
-if host_is_linux_not_s390
+if host_is_linux_not_s390 and enable_bluetooth
   deps += gnome_bluetooth_dep
 endif
 
diff '--exclude=.git' -urN a/panels/printers/meson.build b/panels/printers/meson.build
--- a/panels/printers/meson.build	2020-11-19 18:57:42.000000000 -0600
+++ b/panels/printers/meson.build	2021-05-26 12:34:48.552794660 -0500
@@ -58,12 +58,17 @@
 )
 
 deps = common_deps + [
-  cups_dep,
   m_dep,
   polkit_gobject_dep,
   dependency('smbclient')
 ]
 
+if enable_cups
+  deps += [
+    cups_dep
+  ]
+endif
+
 printers_panel_lib = static_library(
   cappletname,
   sources: sources,
diff '--exclude=.git' -urN a/panels/user-accounts/cc-realm-manager.c b/panels/user-accounts/cc-realm-manager.c
--- a/panels/user-accounts/cc-realm-manager.c	2020-11-19 18:57:42.000000000 -0600
+++ b/panels/user-accounts/cc-realm-manager.c	2021-05-26 12:32:03.613522449 -0500
@@ -22,7 +22,9 @@
 
 #include "cc-realm-manager.h"
 
+#ifdef HAVE_KERBEROS
 #include <krb5/krb5.h>
+#endif /* HAVE_KERBEROS */
 
 #include <glib.h>
 #include <glib/gi18n.h>
@@ -613,6 +615,7 @@
         g_slice_free (LoginClosure, login);
 }
 
+#ifdef HAVE_KERBEROS
 static krb5_error_code
 login_perform_kinit (krb5_context k5,
                      const gchar *realm,
@@ -676,6 +679,7 @@
 
         return code;
 }
+#endif /* HAVE_KERBEROS */
 
 static void
 kinit_thread_func (GTask *task,
@@ -683,6 +687,7 @@
                    gpointer task_data,
                    GCancellable *cancellable)
 {
+#ifdef HAVE_KERBEROS
         LoginClosure *login = task_data;
         krb5_context k5 = NULL;
         krb5_error_code code;
@@ -763,6 +768,10 @@
                 krb5_free_context (k5);
 
         g_object_unref (task);
+#else /* HAVE_KERBEROS */
+        g_task_return_new_error (task, CC_REALM_ERROR, CC_REALM_ERROR_GENERIC,
+                                 _("gnome-control-center was built without kerberos support"));
+#endif
 }
 
 void
diff '--exclude=.git' -urN a/panels/user-accounts/meson.build b/panels/user-accounts/meson.build
--- a/panels/user-accounts/meson.build	2020-11-19 18:57:42.000000000 -0600
+++ b/panels/user-accounts/meson.build	2021-05-26 12:32:03.613522449 -0500
@@ -156,21 +156,31 @@
   'um-fingerprint-dialog.c',
 )
 
-# Kerberos support
-krb_dep = dependency('krb5', required: false)
-assert(krb_dep.found(), 'kerberos libraries not found in your path')
+# Optional dependency for kerberos support
+enable_krb = get_option('krb')
+if enable_krb
+  krb_dep = dependency('krb5', required: false)
+  assert(krb_dep.found(), 'kerberos libraries not found in your path')
+endif
+config_h.set('HAVE_KERBEROS', enable_krb,
+             description: 'Defined if kerberos support is enabled')
 
 deps = common_deps + [
   accounts_dep,
   gdk_pixbuf_dep,
   gnome_desktop_dep,
   liblanguage_dep,
-  krb_dep,
   m_dep,
   polkit_gobject_dep,
   dependency('pwquality', version: '>= 1.2.2')
 ]
 
+if enable_krb
+  deps += [
+    krb_dep
+  ]
+endif
+
 if enable_cheese
   deps += cheese_deps
 endif
diff '--exclude=.git' -urN a/panels/wacom/meson.build b/panels/wacom/meson.build
--- a/panels/wacom/meson.build	2020-11-19 18:57:42.000000000 -0600
+++ b/panels/wacom/meson.build	2021-05-26 12:32:03.613522449 -0500
@@ -1,10 +1,16 @@
-deps = wacom_deps + [
+deps = [
   gnome_desktop_dep,
   gnome_settings_dep,
   x11_dep,
   xi_dep
 ]
 
+if enable_wacom
+  deps += [
+    wacom_deps
+  ]
+endif
+
 cflags += ['-DGNOMELOCALEDIR="@0@"'.format(control_center_localedir)]
 
 test_cflags = cflags + ['-DFAKE_AREA']
diff '--exclude=.git' -urN a/shell/cc-panel-loader.c b/shell/cc-panel-loader.c
--- a/shell/cc-panel-loader.c	2020-11-19 18:57:42.000000000 -0600
+++ b/shell/cc-panel-loader.c	2021-05-26 12:32:03.613522449 -0500
@@ -36,7 +36,9 @@
 #ifdef BUILD_BLUETOOTH
 extern GType cc_bluetooth_panel_get_type (void);
 #endif /* BUILD_BLUETOOTH */
+#ifdef BUILD_COLOR
 extern GType cc_color_panel_get_type (void);
+#endif /* BUILD_COLOR */
 extern GType cc_date_time_panel_get_type (void);
 extern GType cc_default_apps_panel_get_type (void);
 extern GType cc_display_panel_get_type (void);
@@ -48,13 +50,19 @@
 extern GType cc_wifi_panel_get_type (void);
 #endif /* BUILD_NETWORK */
 extern GType cc_notifications_panel_get_type (void);
+#ifdef BUILD_ONLINE_ACCOUNTS
 extern GType cc_goa_panel_get_type (void);
+#endif /* BUILD_ONLINE_ACCOUNTS */
 extern GType cc_power_panel_get_type (void);
+#ifdef BUILD_PRINTERS
 extern GType cc_printers_panel_get_type (void);
+#endif /* BUILD_PRINTERS */
 extern GType cc_region_panel_get_type (void);
 extern GType cc_removable_media_panel_get_type (void);
 extern GType cc_search_panel_get_type (void);
+#ifdef BUILD_SHARING
 extern GType cc_sharing_panel_get_type (void);
+#endif /* BUILD_SHARING */
 extern GType cc_sound_panel_get_type (void);
 #ifdef BUILD_THUNDERBOLT
 extern GType cc_bolt_panel_get_type (void);
@@ -96,7 +104,9 @@
   PANEL_TYPE("bluetooth",        cc_bluetooth_panel_get_type,            NULL),
 #endif
   PANEL_TYPE("camera",           cc_camera_panel_get_type,               NULL),
+#ifdef BUILD_COLOR
   PANEL_TYPE("color",            cc_color_panel_get_type,                NULL),
+#endif /* BUILD_COLOR */
   PANEL_TYPE("datetime",         cc_date_time_panel_get_type,            NULL),
   PANEL_TYPE("default-apps",     cc_default_apps_panel_get_type,         NULL),
   PANEL_TYPE("diagnostics",      cc_diagnostics_panel_get_type,          cc_diagnostics_panel_static_init_func),
@@ -112,13 +122,19 @@
   PANEL_TYPE("wifi",             cc_wifi_panel_get_type,                 cc_wifi_panel_static_init_func),
 #endif
   PANEL_TYPE("notifications",    cc_notifications_panel_get_type,        NULL),
+#ifdef BUILD_ONLINE_ACCOUNTS
   PANEL_TYPE("online-accounts",  cc_goa_panel_get_type,                  NULL),
+#endif /* BUILD_ONLINE_ACCOUNTS */
   PANEL_TYPE("power",            cc_power_panel_get_type,                NULL),
+#ifdef BUILD_PRINTERS
   PANEL_TYPE("printers",         cc_printers_panel_get_type,             NULL),
+#endif /* BUILD_PRINTERS */
   PANEL_TYPE("region",           cc_region_panel_get_type,               NULL),
   PANEL_TYPE("removable-media",  cc_removable_media_panel_get_type,      NULL),
   PANEL_TYPE("search",           cc_search_panel_get_type,               NULL),
+#ifdef BUILD_SHARING
   PANEL_TYPE("sharing",          cc_sharing_panel_get_type,              NULL),
+#endif /* BUILD_SHARING */
   PANEL_TYPE("sound",            cc_sound_panel_get_type,                NULL),
 #ifdef BUILD_THUNDERBOLT
   PANEL_TYPE("thunderbolt",      cc_bolt_panel_get_type,                 NULL),
diff '--exclude=.git' -urN a/shell/meson.build b/shell/meson.build
--- a/shell/meson.build	2020-11-19 18:57:42.000000000 -0600
+++ b/shell/meson.build	2021-05-26 12:32:03.613522449 -0500
@@ -119,7 +119,7 @@
   shell_deps += cheese_deps
 endif
 
-if host_is_linux_not_s390
+if host_is_linux_not_s390 and enable_wacom
   shell_deps += wacom_deps
 endif
 
diff '--exclude=.git' -urN a/tests/meson.build b/tests/meson.build
--- a/tests/meson.build	2020-11-19 18:57:42.000000000 -0600
+++ b/tests/meson.build	2021-05-26 12:32:03.613522449 -0500
@@ -1,10 +1,12 @@
 subdir('common')
 #subdir('datetime')
-if host_is_linux
+if host_is_linux and enable_networkmanager
   subdir('network')
 endif
 
 subdir('interactive-panels')
 
-subdir('printers')
+if enable_cups
+  subdir('printers')
+endif
 subdir('info')
